version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bank_recovery_postgres
    environment:
      POSTGRES_DB: loan_recovery
      POSTGRES_USER: bankuser
      POSTGRES_PASSWORD: bankpass123
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - bank_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bankuser -d loan_recovery"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Queue Management
  redis:
    image: redis:7-alpine
    container_name: bank_recovery_redis
    command: redis-server --appendonly yes --requirepass redispass123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - bank_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: bank_recovery_backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://bankuser:bankpass123@postgres:5432/loan_recovery
      REDIS_URL: redis://:redispass123@redis:6379
      JWT_SECRET: dev-jwt-secret-change-in-production
      PORT: 3000
      FRONTEND_URL: http://localhost:5173
      LOG_LEVEL: debug
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_uploads:/app/uploads
    ports:
      - "3000:3000"
    networks:
      - bank_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: npm run dev

  # Frontend Development Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: bank_recovery_frontend
    environment:
      VITE_API_BASE_URL: http://localhost:3000
      VITE_APP_ENV: development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    networks:
      - bank_network
    depends_on:
      - backend
    restart: unless-stopped
    command: npm run dev

  # Background Worker Service
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile.dev
    container_name: bank_recovery_worker
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://bankuser:bankpass123@postgres:5432/loan_recovery
      REDIS_URL: redis://:redispass123@redis:6379
      LOG_LEVEL: debug
    volumes:
      - ./worker:/app
      - /app/node_modules
    networks:
      - bank_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: npm run dev

  # Adminer for Database Management (Development Only)
  adminer:
    image: adminer:4.8.1
    container_name: bank_recovery_adminer
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: hydra
    ports:
      - "8080:8080"
    networks:
      - bank_network
    depends_on:
      - postgres
    restart: unless-stopped

  # Redis Commander for Redis Management (Development Only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: bank_recovery_redis_commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:redispass123
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    ports:
      - "8081:8081"
    networks:
      - bank_network
    depends_on:
      - redis
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: bank_recovery_nginx
    volumes:
      - ./infra/nginx/dev.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    networks:
      - bank_network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  bank_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16